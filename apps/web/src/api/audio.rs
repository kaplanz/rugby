//! Audio API.

use rugby::emu::part::audio;
use rugby::prelude::*;
use wasm_bindgen::prelude::*;

use super::GameBoy;

#[wasm_bindgen]
impl GameBoy {
    pub fn sample(&self) -> Chiptune {
        self.0.inside().audio().sample().into()
    }
}

/// Rich audio sample.
///
/// Contains individual samples generated by each audio channel. In a real
/// system, these are [mixed](Self::mix) together before being sent to the
/// speaker.
#[derive(Clone, Debug)]
#[wasm_bindgen]
pub struct Chiptune {
    /// Master volume.
    ///
    /// Generally used as a multiplier across all channels.
    pub vol: Sample,
    /// Channel 1 output.
    pub ch1: Sample,
    /// Channel 2 output.
    pub ch2: Sample,
    /// Channel 3 output.
    pub ch3: Sample,
    /// Channel 4 output.
    pub ch4: Sample,
}

impl From<audio::Chiptune> for Chiptune {
    fn from(
        audio::Chiptune {
            vol,
            ch1,
            ch2,
            ch3,
            ch4,
        }: audio::Chiptune,
    ) -> Self {
        Self {
            vol: vol.into(),
            ch1: ch1.into(),
            ch2: ch2.into(),
            ch3: ch3.into(),
            ch4: ch4.into(),
        }
    }
}

/// Audio sample.
///
/// Represents a pair of stereo channel outputs. Samples are 32-bit pulse-code
/// modulated floating point values that are linearly scaled between -1 and 1.
#[derive(Copy, Clone, Debug, Default)]
#[wasm_bindgen]
pub struct Sample {
    /// Left channel.
    pub lt: f32,
    /// Right channel.
    pub rt: f32,
}

impl From<audio::Sample> for Sample {
    fn from(audio::Sample { lt, rt }: audio::Sample) -> Self {
        Self { lt, rt }
    }
}
